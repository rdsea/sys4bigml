services:
  # ----------------------

  # HIS Services

  # ----------------------
  paraglidable_service:
    build: ./paraglidable_service
    container_name: paraglidable_service
    env_file:
      - .env
    environment:
      OTEL_EXPORTER_OTLP_PROTOCOL: ${OTEL_EXPORTER_OTLP_PROTOCOL_GRPC}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT_GRPC}
      OTEL_SERVICE_NAME: ${PARAGLIDABLE_OTEL_SERVICE_NAME}
    ports:
      - "8000:8000"
    depends_on:
      - otel-collector
    networks:
      - his_network

  agent_service:
    build: ./agent_service
    container_name: agent_service
    env_file:
      - .env
    environment:
      OLLAMA_HOST: ${OLLAMA_HOST}
      OLLAMA_PORT: ${OLLAMA_PORT}
      OLLAMA_MODEL: ${OLLAMA_MODEL}
      OTEL_EXPORTER_OTLP_PROTOCOL: ${OTEL_EXPORTER_OTLP_PROTOCOL_GRPC}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT_GRPC}
      OTEL_SERVICE_NAME: ${AGENT_OTEL_SERVICE_NAME}
    ports:
      - "8001:8001"
    depends_on:
      - paraglidable_service
      - human_service
      - otel-collector
    networks:
      - his_network

  human_service:
    build: ./human_service
    container_name: human_service
    env_file:
      - .env
    environment:
      OTEL_EXPORTER_OTLP_PROTOCOL: ${OTEL_EXPORTER_OTLP_PROTOCOL_GRPC}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT_GRPC}
      OTEL_SERVICE_NAME: ${HUMAN_OTEL_SERVICE_NAME}
    ports:
      - "8002:8002"
    depends_on:
      - otel-collector
    networks:
      - his_network

  frontend_service:
    build: ./frontend_service
    container_name: frontend_service
    env_file:
      - .env
    environment:
      OTEL_EXPORTER_OTLP_PROTOCOL: ${OTEL_EXPORTER_OTLP_PROTOCOL_GRPC}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT_GRPC}
      OTEL_SERVICE_NAME: ${FRONTEND_OTEL_SERVICE_NAME}
    ports:
      - "3100:80"
    depends_on:
      - agent_service
      - otel-collector
    networks:
      - his_network
  # ----------------------

  # Observability

  # ----------------------
  otel-collector:
    image: otel/opentelemetry-collector-contrib
    container_name: otel-collector
    volumes:
      - ./assets/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/metrics"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - his_network
    depends_on:
      - jaeger
    restart: always

  jaeger:
    image: jaegertracing/jaeger:latest
    container_name: jaeger
    ports:
      - "16686:16686"   # UI
      - "14268:14268"   # Collector HTTP
      - "14250:14250"   # gRPC
    networks:
      - his_network
    restart: always

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9092:9090"
    networks:
      - his_network
    depends_on:
      - otel-collector
    restart: always

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    networks:
      - his_network
    depends_on:
      - prometheus

networks:
  his_network:
    driver: bridge
